openapi: 3.0.3
info:
  title: Paragliding schools marketplace
  description: 'App for those who want start learning paragliding or continue.
  One can find there schools, instructors, trips, all necessary services and equipment
  for paragliding.'
  license:
    name: MIT
  version: 0.0.1
servers:
  - url: 'https://localhost:8080'
tags:
  - name: School
    description: school CRUDS
  #  - name: Instructor
  #    description: instructor CRUDS
  #  - name: Service
  #    description: service CRUDS
  - name: Trip
    description: trip CRUDS

paths:
  # TODO init needed for WebSocket
  #  /school/init

  #school CRUDS
  /school:
    post:
      tags:
        - School
      summary: create new school
      operationId: saveSchool
      requestBody:
        description: School object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchoolRequest'
        required: true
      responses:
        200:
          description: School created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSchoolResponse'

  /school/{schoolId}:
    get:
      tags:
        - School
      summary: get school by id
      operationId: getSchoolById
      parameters:
        - name: schoolId
          in: path
          description: ID of school
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: School created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchoolResponse'
    post:
      tags:
        - School
      summary: update school by id
      operationId: UpdateSchoolById
      parameters:
        - name: schoolId
          in: path
          description: ID of school
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: School object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchoolRequest'
        required: true
      responses:
        204:
          description: Updated successfully
          content: { }
    delete:
      summary: delete school by id
      operationId: DeleteSchoolById
      parameters:
        - name: schoolId
          in: path
          description: ID of school
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Deleted successfully
          content: { }

components:
  schemas:

    #
    #    HELPER OBJECTS
    #

    BaseMessage:
      type: object
      description: Базовый класс как для запросов, так и для ответов
      properties:
        messageType:
          type: string
          title: Дискриминатор
          description: Дискриминатор, содержащий тип класса сообщения и использующийся для десериализации
      discriminator:
        propertyName: messageType

    BaseRequest:
      description: Базовый класс для всех запросов
      type: object
      properties:
        requestId:
          type: string

    BaseResponse:
      description: Базовый класс для всех ответов
      type: object
      properties:
        requestId:
          type: string
        result:
          type: string
          enum:
            - success
            - failed
        erros:
          type: array
          items:
            $ref: '#/components/schemas/RequestError'

    RequestError:
      type: object
      description: Описание ошибки обработки запроса
      properties:
        message:
          type: string
        field:
          type: string


    BaseDebugRequest:
      type: object
      description: Структура с описанием отладочных параметров запроса
      properties:
        mode:
          type: string
          default: prod
          enum:
            - prod
            - test
            - stub

    CommonPermissions:
      type: string
      description: Доступы к операциям
      enum:
        - read
        - update
        - delete
        - create

    #TODO Base Search Request filters

    #
    #    SCHOOL CRUD
    #

    School:
      type: object
      properties:
        name:
          description: Название школы
          type: string
        welcomeVideoUrl:
          description: Welcome-видео школы
          type: string
        shortInfo:
          description: Краткая информация, история школы
          type: string
        #          change to Object
        location:
          description: Адрес школы
          type: string
        #        change to Entity (one to many schools)
        instructorList:
          description: Список инструкторов
          type: array
          items:
            type: string
        # change to Object
        contactInfo:
          description: Контактная информация (тел, соц. сети)
          type: string
        #        change to list of Services (Entity, one to many)
        serviceBasicInfo:
          description: Краткая информация по услугам, предоставляемым школой
          type: string

    CreateSchoolRequest:
      description: Структура для запроса создания новой школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            createSchool:
              $ref: '#/components/schemas/School'
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - errorDb
                        - fieldsEmpty

    CreateSchoolResponse:
      description: Структура для ответа на запрос о сохранении школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            createdSchool:
              $ref: '#/components/schemas/ResponseSchool'

    ResponseSchool:
      allOf:
        - $ref: '#/components/schemas/UpdateSchool'
        - type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/CommonPermissions'

    GetSchoolRequest:
      description: Структура для получения школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            schoolId:
              type: string
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError

    GetSchoolResponse:
      description: Структура для ответа на запрос с информацией о школе
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            readSchool:
              $ref: '#/components/schemas/ResponseSchool'

    UpdateSchool:
      allOf:
        - $ref: '#/components/schemas/School'
        - type: object
          properties:
            schoolId:
              type: string

    UpdateSchoolRequest:
      description: Структура для запроса обновления существующей школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            updateSchool:
              $ref: '#/components/schemas/UpdateSchool'
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyTitle
                        - databaseError

    UpdateSchoolResponse:
      description: Структура для ответа на запрос об обновлении существующей школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            updatedSchool:
              $ref: '#/components/schemas/ResponseSchool'

    #school deleting is for admins only
    DeleteSchoolRequest:
      description: Структура для запроса удаления школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseRequest'
        - type: object
          properties:
            schoolId:
              type: string
            debug:
              allOf:
                - $ref: '#/components/schemas/BaseDebugRequest'
                - type: object
                  properties:
                    stub:
                      type: string
                      enum:
                        - success
                        - emptyId
                        - databaseError

    DeleteSchoolResponse:
      description: Структура для ответа на запрос об удалении школы
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            deletedSchool:
              $ref: '#/components/schemas/ResponseSchool'


    #
    #   TRIP CRUD
    #
    Trip:
      type: object
      properties:
        location:
          type: string
          description: город, страна
        photoUrl:
          type: string
          description: красивое фото с кэмпа для отображения в карусели
        videoUrl:
          type: string
          description: видео прошлого кэмпа, если есть
        #        change to Object with price differences
        shortInfo:
          type: string
          description: краткое описание, что где куда
        campDates:
          type: string
          description: летные дни кэмпа
        equipmentNeeded:
          type: boolean
          description: включать аренду снаряжения на даты кэмп
        recommendedFlightDates:
          type: string
          description: рекомендованные даты поездки
        price:
          type: integer
          description: стоимость в евро




